Type : int
ID : m
ASSIGN : =
NUM : 9
SEMI : ;
Type : int
ID : func
LEFT_BRACKET : (
Type : int
ID : pu
COMMA : ,
Type : int
ID : y
COMMA : ,
Type : int
ID : c
RIGHT_BRACKET : )
LEFT_CURLY_BRACKET : {
IF : if
LEFT_BRACKET : (
ID : x
GREATER_THAN : >
NUM : 0
RIGHT_BRACKET : )
LEFT_CURLY_BRACKET : {
ID : i
ASSIGN : =
NUM : 1
SEMI : ;
ID : a
ASSIGN : =
ID : c
SEMI : ;
RIGHT_CURLY_BRACKET : }
ELSE : else
LEFT_CURLY_BRACKET : {
ID : a
ASSIGN : =
ID : f
SEMI : ;
RIGHT_CURLY_BRACKET : }
WHILE : while
LEFT_BRACKET : (
ID : s
LEFT_SQ_BRACKET : [
ID : i
RIGHT_SQ_BRACKET : ]
RIGHT_BRACKET : )
LEFT_CURLY_BRACKET : {
ID : h
ASSIGN : =
ID : b
SEMI : ;
RIGHT_CURLY_BRACKET : }
RETURN : return
ID : i
SEMI : ;
RIGHT_CURLY_BRACKET : }
Type : int
ID : ARR
LEFT_BRACKET : (
RIGHT_BRACKET : )
LEFT_CURLY_BRACKET : {
Type : int
ID : x
ASSIGN : =
NUM : 3
SEMI : ;
Type : char*
ID : s
SEMI : ;
ID : func
LEFT_BRACKET : (
ID : x
COMMA : ,
ID : s
RIGHT_BRACKET : )
SEMI : ;
ID : func
LEFT_BRACKET : (
ID : x
LEFT_SQ_BRACKET : [
NUM : 2
RIGHT_SQ_BRACKET : ]
COMMA : ,
ID : i
PLUS : +
ID : j
COMMA : ,
ID : i
COMPARE_EQUAL : ==
NUM : 2
PLUS : +
NUM : 2
RIGHT_BRACKET : )
SEMI : ;
Type : int
ID : dont
ASSIGN : =
NUM : 1
SEMI : ;
RETURN : return
NUM : 1
SEMI : ;
Type : int
ID : y
ASSIGN : =
NUM : 4
PLUS : +
NUM : 3
MULTIPLICATION : *
NUM : 2
SEMI : ;
Type : int
ID : a
LEFT_SQ_BRACKET : [
NUM : 0
RIGHT_SQ_BRACKET : ]
ASSIGN : =
NUM : 4
SEMI : ;
Type : int
ID : a
LEFT_SQ_BRACKET : [
NUM : 4
MULTIPLICATION : *
NUM : 3
PLUS : +
ID : s
RIGHT_SQ_BRACKET : ]
SEMI : ;
RIGHT_CURLY_BRACKET : }
Type : int
ID : main
LEFT_BRACKET : (
RIGHT_BRACKET : )
LEFT_CURLY_BRACKET : {
ID : func
LEFT_BRACKET : (
NUM : 22
COMMA : ,
NUM : 23
COMMA : ,
NUM : 4
MULTIPLICATION : *
NUM : 2
COMMA : ,
NUM : 3
PLUS : +
NUM : 2
RIGHT_BRACKET : )
SEMI : ;
RIGHT_CURLY_BRACKET : }
